#!/bin/sh

mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc
ln -s "../proc/mounts" /etc/mtab

tmpfs_size="10M"
if [ -e /etc/udev/udev.conf ]; then
        . /etc/udev/udev.conf
fi

if ! mount -t devtmpfs -o size=$tmpfs_size,mode=0755 udev /dev; then
        echo "W: devtmpfs not available, falling back to tmpfs for /dev"
        mount -t tmpfs -o size=$tmpfs_size,mode=0755 udev /dev
        [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
        [ -e /dev/null ] || mknod /dev/null c 1 3
fi

mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts
mount -t tmpfs -o rw,nosuid,noexec,relatime,mode=755 tmpfs /run 
mkdir -m 0755 /run/initramfs

INITIALBOOT="0"

export CONFIG_rootfstype="ext4"
export CONFIG_rootfsopts="noatime"
export CONFIG_root="/dev/mmcblk0p2"
export CONFIG_noswapfile="0"
export CONFIG_init='switch_root'
export CONFIG_rootwait='0'
export CONFIG_rw='ro'
export CONFIG_noresizesd='0'
export CONFIG_noconvertsd='0'
export CONFIG_oldmem256='0'

export CMDLINE="$(cat /proc/cmdline)"
for OPTION in ${CMDLINE}
do
	OPTIONNAME=${OPTION%%=*}
	namecheck=${OPTIONNAME##*"."}
	test "$namecheck" = "$OPTIONNAME" || continue
	VALUE=$(printf "%b" ${OPTION#*=})
	test "$VALUE" = "$OPTIONNAME" && VALUE='1' 
	export CONFIG_"$OPTIONNAME"="$VALUE" 
done

test -n "$CONFIG_debug" && unset CONFIG_splash
test -n "$CONFIG_rescue" && unset CONFIG_splash
test -n "$CONFIG_splash" && /usr/bin/splash --infinitebar --msgtxt="init process..."

if [ -n "$CONFIG_debug" ]; then
	exec >/run/initramfs/initramfs.debug 2>&1
	set -x
fi

export MODPROBE_OPTIONS="-qb"

echo > /sys/kernel/uevent_helper

UDEV_ROOT=/dev \
udevd --daemon --resolve-names=never
  if [ -e /sbin/MAKEDEV ]; then
    ln -sf /sbin/MAKEDEV /dev/MAKEDEV
  else
    ln -sf /bin/true /dev/MAKEDEV
  fi

udevadm trigger --action=add
udevadm settle || true

if [ -d /sys/bus/scsi ]; then
        modprobe -q scsi_wait_scan && modprobe -r scsi_wait_scan || true
        udevadm settle || true
fi

echo "Checking for keyboard..."
keyboard=$(/bin/ls /dev/input | grep -m1 event)
if [ "${keyboard}" != '' ]; then
	echo "? boot recovery hold left shift ?"
#	sleep 2
	/usr/bin/key lshift ${keyboard}
	if [ "$?" -eq '0' ]; then 
		echo "Dropping to initramfs on request..."
		/bin/bash
	fi
fi

case ${CONFIG_root} in
	/dev/nfs|nfs)
		export CONFIG_rootfstype='nfs'
		;;
	*)
		;;
esac

case ${CONFIG_rootfstype} in
	/dev/nfs|nfs)
		export CONFIG_root="${CONFIG_nfsroot%%,*}"
		export CONFIG_rootfstype='nfs'
		export CONFIG_rootfsopts="${CONFIG_nfsroot#*,}"
		export CONFIG_noresizesd='1'
		chmod 777 /rootfs
		;;
	*)
		export CONFIG_rootfsopts="${CONFIG_root#*,}"
		export CONFIG_root="${CONFIG_root%%,*}"
		;;
esac

if [ ${CONFIG_rootfsopts} = ${CONFIG_root} ]; then
	export CONFIG_rootfsopts=""
fi

echo "Loading initram modules ... "
cat /etc/modules | grep -v ^# | /usr/bin/xargs -L1 modprobe
udevadm settle || true

if [ -z "$CONFIG_splash" ]; then 
	touch /run/nosplash
fi

# check if new root partition exists
X='0'
while [ ! -b "$CONFIG_root" -a "$CONFIG_rootwait" -eq '1' -a "$CONFIG_rootfstype" != "nfs" -a  "$X" -lt '10' ]; do
	X=$(($X+1))
	echo "$X Waiting for root..."
	sleep 1
done

if [ ! -b "${CONFIG_root}" -a "${CONFIG_rootfstype}" != "nfs" ]; then
	echo "Root partition ${CONFIG_root} missing"
	/bin/bash
fi

if [ -e "/sbin/sfdisk" -a -e "/sbin/fdisk" -a -e "/sbin/tune2fs" -a -e "/sbin/resize2fs" ]; then
	RESIZEERROR="0"
else
	RESIZEERROR="1"
fi

export DEV="${CONFIG_root%[0-9]}"
if [ ! -e ${DEV} ]; then
	export DEV=${DEV%p}
	export PARTdelim='p'
else
	export PARTdelim=''
fi
export PART=${CONFIG_root#${CONFIG_root%?}}

FSCHECK=`blkid | grep ${CONFIG_root} | sed -ne 's/.*TYPE="\([a-z]\{1,\}\)"/\1/p'`;

# Check for the existance of tune2fs through the RESIZEERROR variable
if [ "$RESIZEERROR" -eq '0' -a "$CONFIG_noconvertsd" -eq '0' -a "${CONFIG_rootfstype}" = "btrfs" ]; then

	if [ "${FSCHECK}" = 'ext4' ]; then
		# Make sure we have enough memory available for live conversion
		FREEMEM=`free -m | grep "Mem:" | awk '{printf "%d", $4}'`
		if [ ${FREEMEM} -lt '128' -a ${CONFIG_oldmem256} -eq '0' ]; then
				mkdir /boot
				mount /dev/mmcblk0p1 /boot
				# Save the old memory value to the cmdline.txt to restore it later on
				oldMEM=`sed -ne 's/gpu_mem_256=\([0-9]\{1,3\}\)/\1/p' /boot/config.txt`
				sed -i "s/gpu_mem_256=${oldMEM}/gpu_mem_256=32/g" /boot/config.txt
				sed -i "s/\$/ oldmem256=${oldMEM}/" /boot/cmdline.txt
				umount /boot
				reboot -f
		fi	
	
		test -n "$CONFIG_splash" && /usr/bin/splash --infinitebar --msgtxt="sd card convert..."
		test -n "$CONFIG_splash" \
|| echo '
 .d8888b.   .d88888b.  888b    888 888     888 8888888888 8888888b. 88888888888
d88P  Y88b d88P" "Y88b 8888b   888 888     888 888        888   Y88b    888
888    888 888     888 88888b  888 888     888 888        888    888    888
888        888     888 888Y88b 888 Y88b   d88P 8888888    888   d88P    888
888        888     888 888 Y88b888  Y88b d88P  888        8888888P"     888
888    888 888     888 888  Y88888   Y88o88P   888        888 T88b      888
Y88b  d88P Y88b. .d88P 888   Y8888    Y888P    888        888  T88b     888
 "Y8888P"   "Y88888P"  888    Y888     Y8P     8888888888 888   T88b    888';
		btrfs-convert ${CONFIG_root}
	fi
	

	# Restore the memory value to it's old value
	if [ ${CONFIG_oldmem256} -gt '0' ]; then
			mkdir /boot
			mount /dev/mmcblk0p1 /boot
			newMEM=`sed -ne 's/gpu_mem_256=\([0-9]\{1,3\}\)/\1/p' /boot/config.txt`
			sed -i "s/gpu_mem_256=${newMEM}/gpu_mem_256=${CONFIG_oldmem256}/g" /boot/config.txt
			sed -i "s/ oldmem256=${CONFIG_oldmem256}//g" /boot/cmdline.txt
	fi

	FSCHECK=`blkid | grep ${CONFIG_root} | sed -ne 's/.*TYPE="\([a-z]\{1,\}\)"/\1/p'`;
	if [ "${FSCHECK}" = 'ext4' ]; then
			CONFIG_rootfstype="ext4";
			if [ ${CONFIG_oldmem256} -gt '0' ]; then
					sed -i "s/rootfstype=btrfs/rootfstype=ext4/g" /boot/cmdline.txt
			fi
	fi
	if [ ${CONFIG_oldmem256} -gt '0' ]; then
			umount /boot
			reboot -f
	fi	
fi

if [ "$RESIZEERROR" -eq '0' -a "$CONFIG_noresizesd" -eq '0' -a "${CONFIG_rootfstype}" != "nfs" ]; then
	
	#Save partition table to file
	/sbin/sfdisk -u S -d ${DEV} > /tmp/part.txt
	#Read partition sizes
	sectorTOTAL=`/sbin/fdisk -u sectors -l ${DEV} | grep total | awk '{printf "%s", $8}'`
	sectorSTART=`grep ${CONFIG_root} /tmp/part.txt | awk '{printf "%d", $4}'`
	sectorSIZE=`grep ${CONFIG_root} /tmp/part.txt | awk '{printf "%d", $6}'`
	sectorNEW=$(( $sectorTOTAL - $sectorSTART ))
	rm /tmp/part.txt &>/dev/null

	if [ $sectorSIZE -lt $sectorNEW ]; then
		test -n "$CONFIG_splash" && /usr/bin/splash --infinitebar --msgtxt="sd card resize..."
		test -n "$CONFIG_splash" \
|| echo '
8888888b.  8888888888  .d8888b.  8888888 8888888888P 8888888 888b    888  .d8888b.
888   Y88b 888        d88P  Y88b   888         d88P    888   8888b   888 d88P  Y88b
888    888 888        Y88b.        888        d88P     888   88888b  888 888    888
888   d88P 8888888     "Y888b.     888       d88P      888   888Y88b 888 888
8888888P"  888            "Y88b.   888      d88P       888   888 Y88b888 888  88888
888 T88b   888              "888   888     d88P        888   888  Y88888 888    888
888  T88b  888        Y88b  d88P   888    d88P         888   888   Y8888 Y88b  d88P
888   T88b 8888888888  "Y8888P"  8888888 d8888888888 8888888 888    Y888  "Y8888P88'

		pSIZE=`sfdisk -s ${CONFIG_root} | awk -F'\n' '{ sum += $1 } END {print sum}'`
		echo ",${sectorNEW},,," | sfdisk -uS -N${PART} --force --no-reread -q ${DEV}
		/sbin/partprobe || true
		nSIZE=`sfdisk -s ${CONFIG_root} | awk -F'\n' '{ sum += $1 } END {print sum}'`

		if [ ! $nSIZE -gt $pSIZE ]; then
			RESIZERROR="1"
		fi
	fi
fi

if [ "$RESIZEERROR" -eq "0" -a "$CONFIG_noresizesd" -eq '0' -a "$CONFIG_rootfstype"="ext4" ]; then

	if [ "${FSCHECK}" = 'ext4' ]; then
		# check if the partition needs resizing
		TUNE2FS=`/sbin/tune2fs -l ${CONFIG_root}`;
		TUNEBLOCKSIZE=`echo -e "${TUNE2FS}" | grep "Block size" | awk '{printf "%d", $3}'`;
		TUNEBLOCKCOUNT=`echo -e "${TUNE2FS}" | grep "Block count" | awk '{printf "%d", $3}'`;
		BLOCKNEW=$(($sectorNEW / ($TUNEBLOCKSIZE / 512) ))

		# resize root partition
		if [ "$TUNEBLOCKCOUNT" -lt "$BLOCKNEW" ]; then
			test -n "$CONFIG_splash" && /usr/bin/splash --infinitebar --msgtxt="sd card resize..."
			test -n "$CONFIG_splash" \
|| echo '
8888888b.  8888888888  .d8888b.  8888888 8888888888P 8888888 888b    888  .d8888b.
888   Y88b 888        d88P  Y88b   888         d88P    888   8888b   888 d88P  Y88b
888    888 888        Y88b.        888        d88P     888   88888b  888 888    888
888   d88P 8888888     "Y888b.     888       d88P      888   888Y88b 888 888
8888888P"  888            "Y88b.   888      d88P       888   888 Y88b888 888  88888
888 T88b   888              "888   888     d88P        888   888  Y88888 888    888
888  T88b  888        Y88b  d88P   888    d88P         888   888   Y8888 Y88b  d88P
888   T88b 8888888888  "Y8888P"  8888888 d8888888888 8888888 888    Y888  "Y8888P88';
			/sbin/resize2fs ${CONFIG_root}
			TUNE2FS=`/sbin/tune2fs -l ${CONFIG_root}`;
			TUNEBLOCKSIZE=`echo -e "${TUNE2FS}" | grep "Block size" | awk '{printf "%d", $3}'`;
			TUNEBLOCKCOUNT=`echo -e "${TUNE2FS}" | grep "Block count" | awk '{printf "%d", $3}'`;

			# check if parition was actually resized
			if [ ${TUNEBLOCKCOUNT} -lt ${BLOCKNEW} ]; then
				RESIZEERROR="1"
			fi
		fi
	fi
fi


if [ -n "$CONFIG_ip" ]; then
	test -n "$CONFIG_splash" && /usr/bin/splash --percentagebar --percentage=10 --msgtxt="configuring network ..."
	case "$CONFIG_ip" in 
		dhcp|auto|on)
			for f in $(basename /sys/class/net/*) ; do
				ipconfig $f

				. /run/net-$(basename $f).conf
			done
			;;
		off|no)
			;;
		*)	
			ipconfig "$CONFIG_ip"

			. /run/run-*.conf
			;;
	esac 
fi

test -n "$CONFIG_rescue" && /bin/bash

test "$CONFIG_rw" = '1' && export CONFIG_rw='rw'
# mount root partition
echo "Mounting root as: mount -t ${CONFIG_rootfstype} -o "$CONFIG_rw",${CONFIG_rootfsopts} ${CONFIG_root} /rootfs"
mount -t ${CONFIG_rootfstype} -o "$CONFIG_rw","$CONFIG_rootfsopts" "${CONFIG_root}" /rootfs
if [ "$?" -ne '0' ]; then
	echo "Mounting root partition ${CONFIG_root} failed"
	/bin/bash
fi

if [ "$RESIZEERROR" -eq "0" -a "$CONFIG_noresizesd" -eq '0' -a "$CONFIG_rootfstype" = "btrfs" -a "${FSCHECK}" = 'btrfs' ]; then

	# check if the partition needs resizing
	sectorDF=`df -B512 -P | grep "/rootfs" | awk '{printf "%d", $2}'`
	
	# resize root partition
	if [ "$sectorDF" -lt "$sectorNEW" ]; then
		test -n "$CONFIG_splash" && /usr/bin/splash --infinitebar --msgtxt="sd card resize..."
		test -n "$CONFIG_splash" \
|| echo '
8888888b.  8888888888  .d8888b.  8888888 8888888888P 8888888 888b    888  .d8888b.
888   Y88b 888        d88P  Y88b   888         d88P    888   8888b   888 d88P  Y88b
888    888 888        Y88b.        888        d88P     888   88888b  888 888    888
888   d88P 8888888     "Y888b.     888       d88P      888   888Y88b 888 888
8888888P"  888            "Y88b.   888      d88P       888   888 Y88b888 888  88888
888 T88b   888              "888   888     d88P        888   888  Y88888 888    888
888  T88b  888        Y88b  d88P   888    d88P         888   888   Y8888 Y88b  d88P
888   T88b 8888888888  "Y8888P"  8888888 d8888888888 8888888 888    Y888  "Y8888P88'
		/sbin/btrfs fi resize max /rootfs
		
		sectorDF=`df -B512 -P | grep "/rootfs" | awk '{printf "%d", $2}'`

		# check if parition was actually resized
		if [ "$sectorDF" -lt "$sectorNEW" ]; then
			RESIZEERROR="1"
		fi
	fi
fi

test -n "${CONFIG_splash}" && /rootfs/usr/bin/splash --percentagebar --percentage=10 --msgtxt="loading..."

echo "Moving root"

udevadm control --exit
udev_root="/rootfs/dev"
if [ -e /etc/udev/udev.conf ]; then
  . /etc/udev/udev.conf
fi

mount -n -o move /run /rootfs/run
mount -n -o move /dev /rootfs/dev

rm -fr /dev
ln -s /rootfs/dev /dev

mount -n -o move /sys /rootfs/sys
mount -n -o move /proc /rootfs/proc

if [ ${CONFIG_init} = 'switch_root' ]; then
	exec switch_root /rootfs /sbin/init 
#"$@" </rootfs/dev/console >/rootfs/dev/console
else
	exec switch_root /rootfs ${CONFIG_init} 
#"$@" </rootfs/dev/console >/rootfs/dev/console
fi

echo "Failed to switch_root, dropping to a shell"
exec /bin/bash
